// Code generated by MockGen. DO NOT EDIT.
// Source: metrics.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// RecordDatabaseOperationDuration mocks base method.
func (m *MockMetrics) RecordDatabaseOperationDuration(operation string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordDatabaseOperationDuration", operation, duration)
}

// RecordDatabaseOperationDuration indicates an expected call of RecordDatabaseOperationDuration.
func (mr *MockMetricsMockRecorder) RecordDatabaseOperationDuration(operation, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordDatabaseOperationDuration", reflect.TypeOf((*MockMetrics)(nil).RecordDatabaseOperationDuration), operation, duration)
}

// RecordExternalServiceCall mocks base method.
func (m *MockMetrics) RecordExternalServiceCall(serviceName string, success bool, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordExternalServiceCall", serviceName, success, duration)
}

// RecordExternalServiceCall indicates an expected call of RecordExternalServiceCall.
func (mr *MockMetricsMockRecorder) RecordExternalServiceCall(serviceName, success, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordExternalServiceCall", reflect.TypeOf((*MockMetrics)(nil).RecordExternalServiceCall), serviceName, success, duration)
}

// RecordTransactionAmount mocks base method.
func (m *MockMetrics) RecordTransactionAmount(transactionType string, amount float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTransactionAmount", transactionType, amount)
}

// RecordTransactionAmount indicates an expected call of RecordTransactionAmount.
func (mr *MockMetricsMockRecorder) RecordTransactionAmount(transactionType, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransactionAmount", reflect.TypeOf((*MockMetrics)(nil).RecordTransactionAmount), transactionType, amount)
}

// RecordTransactionCompleted mocks base method.
func (m *MockMetrics) RecordTransactionCompleted(transactionType string, success bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTransactionCompleted", transactionType, success)
}

// RecordTransactionCompleted indicates an expected call of RecordTransactionCompleted.
func (mr *MockMetricsMockRecorder) RecordTransactionCompleted(transactionType, success interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransactionCompleted", reflect.TypeOf((*MockMetrics)(nil).RecordTransactionCompleted), transactionType, success)
}

// RecordTransactionIdempotent mocks base method.
func (m *MockMetrics) RecordTransactionIdempotent(transactionType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTransactionIdempotent", transactionType)
}

// RecordTransactionIdempotent indicates an expected call of RecordTransactionIdempotent.
func (mr *MockMetricsMockRecorder) RecordTransactionIdempotent(transactionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransactionIdempotent", reflect.TypeOf((*MockMetrics)(nil).RecordTransactionIdempotent), transactionType)
}

// RecordTransactionProcessingTime mocks base method.
func (m *MockMetrics) RecordTransactionProcessingTime(transactionType string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTransactionProcessingTime", transactionType, duration)
}

// RecordTransactionProcessingTime indicates an expected call of RecordTransactionProcessingTime.
func (mr *MockMetricsMockRecorder) RecordTransactionProcessingTime(transactionType, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransactionProcessingTime", reflect.TypeOf((*MockMetrics)(nil).RecordTransactionProcessingTime), transactionType, duration)
}

// RecordTransactionStarted mocks base method.
func (m *MockMetrics) RecordTransactionStarted(transactionType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTransactionStarted", transactionType)
}

// RecordTransactionStarted indicates an expected call of RecordTransactionStarted.
func (mr *MockMetricsMockRecorder) RecordTransactionStarted(transactionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransactionStarted", reflect.TypeOf((*MockMetrics)(nil).RecordTransactionStarted), transactionType)
}

// UpdateWalletBalance mocks base method.
func (m *MockMetrics) UpdateWalletBalance(walletID, currency string, balance float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateWalletBalance", walletID, currency, balance)
}

// UpdateWalletBalance indicates an expected call of UpdateWalletBalance.
func (mr *MockMetricsMockRecorder) UpdateWalletBalance(walletID, currency, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletBalance", reflect.TypeOf((*MockMetrics)(nil).UpdateWalletBalance), walletID, currency, balance)
}
