// Code generated by MockGen. DO NOT EDIT.
// Source: payments.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/payment_ports_mock.go -package=mocks -source=payments.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/emiliocc5/payment-system/payment-wallet-service/internal/core/domain"
	v5 "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
	isgomock struct{}
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// CheckIdempotency mocks base method.
func (m *MockPaymentRepository) CheckIdempotency(ctx context.Context, tx v5.Tx, idempotencyKey string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIdempotency", ctx, tx, idempotencyKey)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIdempotency indicates an expected call of CheckIdempotency.
func (mr *MockPaymentRepositoryMockRecorder) CheckIdempotency(ctx, tx, idempotencyKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIdempotency", reflect.TypeOf((*MockPaymentRepository)(nil).CheckIdempotency), ctx, tx, idempotencyKey)
}

// Create mocks base method.
func (m *MockPaymentRepository) Create(ctx context.Context, tx v5.Tx, payment domain.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPaymentRepositoryMockRecorder) Create(ctx, tx, payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentRepository)(nil).Create), ctx, tx, payment)
}

// Update mocks base method.
func (m *MockPaymentRepository) Update(ctx context.Context, payment domain.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPaymentRepositoryMockRecorder) Update(ctx, payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPaymentRepository)(nil).Update), ctx, payment)
}

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
	isgomock struct{}
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentService) Create(ctx context.Context, request domain.CreatePaymentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPaymentServiceMockRecorder) Create(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentService)(nil).Create), ctx, request)
}

// Update mocks base method.
func (m *MockPaymentService) Update(ctx context.Context, paymentID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, paymentID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPaymentServiceMockRecorder) Update(ctx, paymentID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPaymentService)(nil).Update), ctx, paymentID, status)
}
