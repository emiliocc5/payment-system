// Code generated by MockGen. DO NOT EDIT.
// Source: balance.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/balance_ports_mock.go -package=mocks -source=balance.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/emiliocc5/payment-system/payment-wallet-service/internal/core/domain"
	v5 "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockBalanceRepository is a mock of BalanceRepository interface.
type MockBalanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceRepositoryMockRecorder
	isgomock struct{}
}

// MockBalanceRepositoryMockRecorder is the mock recorder for MockBalanceRepository.
type MockBalanceRepositoryMockRecorder struct {
	mock *MockBalanceRepository
}

// NewMockBalanceRepository creates a new mock instance.
func NewMockBalanceRepository(ctrl *gomock.Controller) *MockBalanceRepository {
	mock := &MockBalanceRepository{ctrl: ctrl}
	mock.recorder = &MockBalanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceRepository) EXPECT() *MockBalanceRepositoryMockRecorder {
	return m.recorder
}

// ConfirmReserve mocks base method.
func (m *MockBalanceRepository) ConfirmReserve(ctx context.Context, userID string, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmReserve", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmReserve indicates an expected call of ConfirmReserve.
func (mr *MockBalanceRepositoryMockRecorder) ConfirmReserve(ctx, userID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmReserve", reflect.TypeOf((*MockBalanceRepository)(nil).ConfirmReserve), ctx, userID, amount)
}

// Get mocks base method.
func (m *MockBalanceRepository) Get(ctx context.Context, userID string) (*domain.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(*domain.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBalanceRepositoryMockRecorder) Get(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBalanceRepository)(nil).Get), ctx, userID)
}

// ReleaseFunds mocks base method.
func (m *MockBalanceRepository) ReleaseFunds(ctx context.Context, userID string, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseFunds", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseFunds indicates an expected call of ReleaseFunds.
func (mr *MockBalanceRepositoryMockRecorder) ReleaseFunds(ctx, userID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseFunds", reflect.TypeOf((*MockBalanceRepository)(nil).ReleaseFunds), ctx, userID, amount)
}

// ReserveFunds mocks base method.
func (m *MockBalanceRepository) ReserveFunds(ctx context.Context, tx v5.Tx, userID string, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveFunds", ctx, tx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveFunds indicates an expected call of ReserveFunds.
func (mr *MockBalanceRepositoryMockRecorder) ReserveFunds(ctx, tx, userID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveFunds", reflect.TypeOf((*MockBalanceRepository)(nil).ReserveFunds), ctx, tx, userID, amount)
}

// MockBalanceService is a mock of BalanceService interface.
type MockBalanceService struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceServiceMockRecorder
	isgomock struct{}
}

// MockBalanceServiceMockRecorder is the mock recorder for MockBalanceService.
type MockBalanceServiceMockRecorder struct {
	mock *MockBalanceService
}

// NewMockBalanceService creates a new mock instance.
func NewMockBalanceService(ctrl *gomock.Controller) *MockBalanceService {
	mock := &MockBalanceService{ctrl: ctrl}
	mock.recorder = &MockBalanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceService) EXPECT() *MockBalanceServiceMockRecorder {
	return m.recorder
}

// ReserveFunds mocks base method.
func (m *MockBalanceService) ReserveFunds(ctx context.Context, tx v5.Tx, userID string, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveFunds", ctx, tx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveFunds indicates an expected call of ReserveFunds.
func (mr *MockBalanceServiceMockRecorder) ReserveFunds(ctx, tx, userID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveFunds", reflect.TypeOf((*MockBalanceService)(nil).ReserveFunds), ctx, tx, userID, amount)
}

// Update mocks base method.
func (m *MockBalanceService) Update(ctx context.Context, userID string, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBalanceServiceMockRecorder) Update(ctx, userID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBalanceService)(nil).Update), ctx, userID, amount)
}
